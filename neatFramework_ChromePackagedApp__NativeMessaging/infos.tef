# R: the goal here is to have a simple implementation of Chrome's "NativeMessaging"
#    we are trying to communicate between an extension/packaged app & a C/C++ app
#    the current platform is Linux ( Ubuntu 13.04 )

# 1: in order to communicate wth a native messaging host, we need a manifest file
{
  "name": "com.my_company.my_app",
  "description": "My Appl",
  "path": "C:\Program Files\My Application\chrome_native_messaging_host.exe", # Windaube
  # or 
  "path": "chrome_native_messaging_host.exe" # Windaube 2: relative path
  # or
  "path": "/../...app" # OSX => ABSOLUTE PATH ONLY !
  # or
  "path": "/../.." # Linux => ABSOLUTE PATH ONLY !
  "type": "stdio",
  "allowed_origins": [
    "chrome-extension://knldjmfmopnpolahpmmgbagdohdnhkik/"
  ]
}

----------
path => Path to the native messaging host binary
        On Linux and OSX, the path must be absolute
        On Windows it can be relative to the directory in which the manifest file is located

allowed_origins => List of extensions that should have access to the native messaging host

R: to get the directory where the extension/packaged app resides in, a neat little trick is to call the following in the inspector's javascript console
   typing:      " chrome.runtime.getURL(''); "
   'll return:  "chrome-extension://kbmgdicnfpofmognhiagcmhcmnigdnae/"


# 2: locations of the manifest file depending on the platform

Windaube => manifest file can be located anywhere in the file system
            application installer must create registry key at
            HKEY_LOCAL_MACHINE\SOFTWARE\Google\Chrome\NativeMessagingHosts\com.my_company.my_app
            or
            HKEY_CURRENT_USER\SOFTWARE\Google\Chrome\NativeMessagingHosts\com.my_company.my_app,
            & set default value of that key to the full path to the manifest file

OSX => manifest file in
       /Library/Google/Chrome/NativeMessagingHosts/com.my_company.my_app.json
       or
       ~/Library/Application Support/Google/Chrome/NativeMessagingHosts/com.my_company.my_app.json
       for user level installed apps

Linux => manifest in
         /etc/opt/chrome/native-messaging-hosts/com.my_company.my_app.json
         or
         ~/.config/google-chrome/NativeMessagingHosts/com.my_company.my_app.json
         for user level installed apps

R: here, I started to test implementing while having the "com.seedsdesign.nfeeg" manifest in "/home/stephaneag/.config/google-chrome/NativeMessagingHosts/"




Chrome starts each native messaging host in a separate process
The communication is done using stdin & stdout
Messages are serialized using JSON UTF-8 encoded & preceded with 32-bit msg length in native byte order

When a messaging port is created with " runtime.connectNative()":
  Chrome starts native messagigng host process & keep it until port is destroyed

When a message is sent using "runtime.sendNativeMessage()":
 ( without creating a messaging port )
  Chrome starts a new native messaging host process for each message
  In that case, the 1st message generated by the host process is handled as a response
  to the original request.
  ( Chrome 'll pass it to the response callback specified when "runtime.sendNativeMessage()" is called )
  All other messages generated by the native messaging host in that case are ignored




# 3: Connecting to a native application

example of creating a runtime port, starting listening for messages from it & sending one message
----
var port = chrome.runtime.connectNative('com.my_company.my_app');
port.onMessage.addListener(function(msg) {
  console.log("Received" + msg);
});
port.onDisconnect.addListener(function() {
  console.log("Disconnected");
});
port.postMessage({ text: "Hello, my_application" });
----


example of sending a message without creating a port
----
chrome.runtime.sendNativeMessage('com.my_company.my_app',
                                 { text: "Hello" },
                                 function(response) {
                                   console.log("Received " + response);
                                 });
----



# 4: coding test implementations in C/C++

R: In order for a native app to send data to Chrome, wee must send 4 bytes of length information,
   then send the JSON formatted message as a string / char array

the files "chrome_nativemessaging.c" & "chrome_nativemessaging.cpp" [ 'll ] both implement the necessary,
note these do the same stuff but in slightly different ways ( .. )

these resides currently in "/home/stephaneag/Documents/Development/dev__Chrome_Packaged_Apps/neatFramework_ChromePackagedApp__NativeMessaging/NativeCode/"
